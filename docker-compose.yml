

services:
  frontend:
    build: ./frontend
    container_name: frontend_container
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    networks:
      - front-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_container
    restart: always
    ports:
      - "8000:8000" 
    env_file:
      - .env
    volumes:
      - ./backend:/app
    networks:
      - db-network
      - front-network
    depends_on:
      mysql:
        condition: service_healthy

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "9080:8080"
    env_file:
      - .env
    environment:
      - ADMINER_DEFAULT_SERVER=${ADMINER_DEFAULT_SERVER}
      - ADMINER_DESIGN=pepa-linha-dark
    networks:
      - db-network
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: mysql:8.4
    container_name: mysql_db
    ports:
      - "3306:3306"
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      # Comment√© temporairement pour tester sans db.dump.sql
      # - ./database/db.dump.sql:/docker-entrypoint-initdb.d/db.dump.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - db-network

volumes:
  db_data:

networks:
  db-network:
  front-network: