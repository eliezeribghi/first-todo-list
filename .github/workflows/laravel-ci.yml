name: Laravel CI

on:
  workflow_dispatch:
    inputs:
      environnement:
        description: 'Choisir l’environnement'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version à déployer'
        required: false
  push:
    branches: [master, github-action]
    tags: ['v*.*.*']
  pull_request:
    branches: [master, github-action]

jobs:
  laravel-tests:
    name: Run Laravel Tests in Docker
    runs-on: ubuntu-latest
    environment: firsttodo-list

    env:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: todolist
      DB_USERNAME: user_dbb
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: todolist
      MYSQL_USER: user_dbb
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      ADMINER_DEFAULT_SERVER: mysql
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    steps:
      - name: Afficher les paramètres de déploiement
        if: github.event_name == 'workflow_dispatch'
        run: |  
          echo "Déploiement sur ${{ github.event.inputs.environnement }}"
          echo "Version : ${{ github.event.inputs.version || 'non spécifiée' }}"

      - name: 🛎 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Compose
        run: |
          docker --version
          sudo rm -f /usr/local/bin/docker-compose
          curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: 📄 Display docker-compose.yml
        run: cat docker-compose.yml

      - name: 📄 Create .env file
        run: |
          {
            echo "APP_NAME=Laravel"
            echo "APP_ENV=local"
            echo "APP_KEY="
            echo "APP_DEBUG=true"
            echo "APP_URL=http://localhost:8000"
            echo "DB_CONNECTION=mysql"
            echo "DB_HOST=${{ env.DB_HOST }}"
            echo "DB_PORT=${{ env.DB_PORT }}"
            echo "DB_DATABASE=${{ env.DB_DATABASE }}"
            echo "DB_USERNAME=${{ env.DB_USERNAME }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "MYSQL_DATABASE=${{ env.MYSQL_DATABASE }}"
            echo "MYSQL_USER=${{ env.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
            echo "ADMINER_DEFAULT_SERVER=${{ env.ADMINER_DEFAULT_SERVER }}"
            echo "BROADCAST_DRIVER=log"
            echo "CACHE_DRIVER=file"
            echo "FILESYSTEM_DRIVER=local"
            echo "QUEUE_CONNECTION=sync"
            echo "SESSION_DRIVER=file"
            echo "SESSION_LIFETIME=120"
            echo "REDIS_HOST=127.0.0.1"
            echo "REDIS_PASSWORD=null"
            echo "REDIS_PORT=6379"
            echo "MAIL_MAILER=smtp"
            echo "MAIL_HOST=mailhog"
            echo "MAIL_PORT=1025"
            echo "MAIL_USERNAME=null"
            echo "MAIL_PASSWORD=null"
            echo "MAIL_ENCRYPTION=null"
            echo "MAIL_FROM_ADDRESS=null"
            echo "MAIL_FROM_NAME=\"Laravel\""
          } > .env
          cat .env # Pour débogage

      - name: 🔍 Debug environment variables
        run: |
          echo "DB_PASSWORD is set to: ${{ secrets.DB_PASSWORD }}"
          echo "MYSQL_ROOT_PASSWORD is set to: ${{ secrets.MYSQL_ROOT_PASSWORD }}"
          echo "MYSQL_PASSWORD is set to: ${{ secrets.MYSQL_PASSWORD }}"
          cat .env

      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 🚀 Build and start containers
        run: |
          echo "Starting Docker Compose..."
          docker-compose up -d --build
          echo "Docker Compose started, listing containers..."
          docker-compose ps

      - name: 📝 Show MySQL logs immediately
        if: always()
        run: docker-compose logs mysql

      - name: ⏳ Wait for DB to be ready
        run: |
          for i in {1..30}; do
            docker-compose exec -T mysql mysqladmin ping -h mysql -u ${{ env.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} --silent && break
            echo "Waiting for DB..."
            docker-compose ps
            sleep 2
          done
          if ! docker-compose exec -T mysql mysqladmin ping -h mysql -u ${{ env.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} --silent; then
            echo "Database failed to start"
            docker-compose logs mysql
            exit 1
          fi

      - name: 📝 Show MySQL logs if DB is not ready
        if: failure()
        run: docker-compose logs mysql

      - name: 📦 Install Composer dependencies
        run: docker-compose exec -T backend composer install --no-dev --optimize-autoloader

      - name: 🔑 Generate application key
        run: docker-compose exec -T backend php artisan key:generate

      - name: 🔄 Run migrations
        run: docker-compose exec -T backend php artisan migrate --force

      - name: ✅ Run PHPUnit tests
        run: docker-compose exec -T backend php artisan test

      - name: 📜 Show logs if tests fail
        if: failure()
        run: docker-compose logs

      - name: 🛑 Stop containers
        if: always()
        run: docker-compose down --volumes --remove-orphans

      - name: 📢 Notify Slack on failure
        if: failure() && github.event_name != 'workflow_dispatch' && env.SLACK_BOT_TOKEN != ''
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'github'
          text: |
            ❌ Laravel CI failed for *${{ github.repository }}*
            Ref: `${{ github.ref }}`
            Author: `${{ github.actor }}`
            Commit: `${{ github.sha }}`
            URL: `<${{ github.event.repository.html_url }}/commit/${{ github.sha }}|View Commit>`
            ${{ github.event.pull_request.html_url && format('PR: <{0}|View PR>', github.event.pull_request.html_url) || '' }}
            Repository: `<${{ github.event.repository.html_url }}|${{ github.event.repository.name }}>`
            Branch: `${{ github.ref }}`
            Commit Message: `${{ github.event.head_commit.message || 'N/A' }}`
            Commit Author: `${{ github.event.head_commit.author.name || github.actor }}`
            Commit Author Email: `${{ github.event.head_commit.author.email || 'N/A' }}`