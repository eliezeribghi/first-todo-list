name: Laravel CI

on:
  push:
    branches: [master, github-action]
    tags: ['v*.*.*']
  pull_request:
    branches: [master, github-action]

jobs:
  laravel-tests:
    name: Run Laravel Tests in Docker
    runs-on: ubuntu-latest

    env:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: todolist
      DB_USERNAME: user_dbb
      DB_PASSWORD: test
      MYSQL_ROOT_PASSWORD: root
      ADMINER_DEFAULT_SERVER: mysql

    steps:
      - name: 🛎 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Check Docker installation
        run: |
          docker --version
          docker compose version

      - name: 📄 Create .env file
        run: |
          {
            echo "APP_NAME=Laravel"
            echo "APP_ENV=local"
            echo "APP_KEY="
            echo "APP_DEBUG=true"
            echo "APP_URL=http://localhost:8000"
            echo "DB_CONNECTION=mysql"
            echo "DB_HOST=${DB_HOST}"
            echo "DB_PORT=${DB_PORT}"
            echo "DB_DATABASE=${DB_DATABASE}"
            echo "DB_USERNAME=${DB_USERNAME}"
            echo "DB_PASSWORD=${DB_PASSWORD}"
            echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
            echo "MYSQL_DATABASE=${DB_DATABASE}"
            echo "MYSQL_USER=${DB_USERNAME}"
            echo "MYSQL_PASSWORD=${DB_PASSWORD}"
            echo "ADMINER_DEFAULT_SERVER=${ADMINER_DEFAULT_SERVER}"
          } > .env

      - name: 💾 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 🚀 Build and start containers
        run: docker compose up -d --build

      - name: ⏳ Wait for DB to be ready
        run: |
          for i in {1..30}; do
            docker compose exec -T backend php -r "
              try {
                new PDO('mysql:host=mysql;port=3306;dbname=todolist', 'user_dbb', 'test');
                exit(0);
              } catch (Exception \$e) {
                exit(1);
              }
            " && break
            echo 'Waiting for DB...'
            sleep 2
          done

      - name: 🔑 Generate application key
        run: docker compose exec -T backend php artisan key:generate

      - name: ✅ Run PHPUnit tests
        run: docker compose exec -T backend php artisan test

      - name: 📜 Show logs if tests fail
        if: failure()
        run: docker compose logs

      - name: 🛑 Stop containers
        if: always()
        run: docker compose down --volumes

      - name: 📢 Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'github'
          text: |
            ❌ Laravel CI failed for *${{ github.repository }}*
            Ref: `${{ github.ref }}`
            Author: `${{ github.actor }}`
            Commit: `${{ github.sha }}`
            URL: `<${{ github.event.repository.html_url }}/commit/${{ github.sha }}|View Commit>`
            PR: `<${{ github.event.pull_request.html_url }}|View PR>`
            Repository: `<${{ github.event.repository.html_url }}|${{ github.event.repository.name }}>`
            Branch: `${{ github.ref }}`
            Commit Message: `${{ github.event.head_commit.message }}`
            Commit Author: `${{ github.event.head_commit.author.name }}`
            Commit Author Email: `${{ github.event.head_commit.author.email }}`


    # - name: Notify on failure
    #   if: failure()
    #   uses: slackapi/slack-github-action@v1.27.0
    #   with:
    #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
    #     channel-id: 'github'
    #     text: 'Laravel CI failed for ${{ github.repository }} on ${{ github.ref }}'