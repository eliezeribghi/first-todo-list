---
# 1. Configurer le nœud maître pour Kubernetes et Argo CD
# Prépare la VM pour un cluster Kubernetes mono-nœud et déploie Argo CD, retiens mon pute.
- name: Configurer le nœud maître pour Kubernetes et Argo CD
  hosts: master
  become: true
  tasks:
    # 1.1. Mettre à jour le cache apt
    - name: Mettre à jour le cache apt
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    # 1.2. Installer les dépendances de base
    - name: Installer les dépendances
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - containerd
          - python3-pip
        state: present

    # 1.3. Configurer containerd
    - name: Configurer containerd
      ansible.builtin.shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
      args:
        executable: /bin/bash

    # 1.4. Activer et démarrer containerd
    - name: Activer et démarrer containerd
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: true

    # 1.5. Télécharger la clé GPG Kubernetes
    - name: Télécharger la clé GPG Kubernetes
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'

    # 1.6. Ajouter le dépôt Kubernetes
    - name: Ajouter le dépôt Kubernetes
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
        state: present
        filename: kubernetes

    # 1.7. Installer kubeadm, kubelet, kubectl
    - name: Installer kubeadm, kubelet, kubectl
      ansible.builtin.apt:
        name:
          - kubeadm=1.31.*
          - kubelet=1.31.*
          - kubectl=1.31.*
        state: latest
        update_cache: true

    # 1.8. Activer et démarrer kubelet
    - name: Activer et démarrer kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true

    # 1.9. Désactiver le swap
    - name: Désactiver le swap
      ansible.builtin.command: swapoff -a
      changed_when: true

    # 1.10. Désactiver le swap dans fstab
    - name: Désactiver le swap dans fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)'
        line: '# \1'
        backrefs: yes

    # 1.11. Configurer le hostname dans /etc/hosts
    - name: Configurer le hostname dans /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 master-node"
        state: present

    # 1.12. Réinitialiser l’état Kubernetes
    - name: Réinitialiser l’état Kubernetes
      ansible.builtin.command: kubeadm reset -f
      ignore_errors: true

    # 1.13. Supprimer les fichiers résiduels
    - name: Supprimer les fichiers résiduels
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/etcd
        - /var/lib/kubelet
        - /etc/cni
        - /var/lib/cni
      ignore_errors: true

    # 1.14. Libérer les ports Kubernetes
    - name: Libérer les ports Kubernetes
      ansible.builtin.shell: |
        for port in 6443 10259 10257 10250 2379 2380; do
          fuser -k $port/tcp || true
        done
      args:
        executable: /bin/bash
      ignore_errors: true

    # 1.15. Créer le répertoire /etc/kubernetes
    - name: Créer le répertoire /etc/kubernetes
      ansible.builtin.file:
        path: /etc/kubernetes
        state: directory
        mode: '0755'
        owner: root
        group: root

    # 1.16. Configurer kubeadm
    - name: Configurer kubeadm
      ansible.builtin.copy:
        content: |
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: InitConfiguration
          localAPIEndpoint:
            advertiseAddress: "{{ ansible_default_ipv4.address }}"
          nodeRegistration:
            criSocket: "unix:///run/containerd/containerd.sock"
            name: "master-node"
          ---
          apiVersion: kubeadm.k8s.io/v1beta4
          kind: ClusterConfiguration
          kubernetesVersion: "v1.31.0"
          networking:
            podSubnet: "10.244.0.0/16"
          imageRepository: registry.k8s.io
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
        dest: /etc/kubernetes/kubeadm-config.yaml
        mode: '0644'

    # 1.17. Initialiser le cluster Kubernetes
    - name: Initialiser le cluster Kubernetes
      ansible.builtin.command: kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml
      register: kubeadm_init
      retries: 3
      delay: 10

    # 1.18. Créer le dossier .kube
    - name: Créer le dossier .kube
      ansible.builtin.file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # 1.19. Copier admin.conf
    - name: Copier admin.conf
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    # 1.20. Installer Flannel
    - name: Installer Flannel
      ansible.builtin.command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.25.6/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config

    # 1.21. Installer python3-pip et kubernetes pour kubernetes.core.k8s
    - name: Installer python3-pip
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes

    - name: Installer la bibliothèque Python kubernetes
      ansible.builtin.pip:
        name: kubernetes
        state: present
        executable: pip3

    # 1.22. Créer le namespace argocd
    - name: Créer le namespace argocd
      ansible.builtin.command: kubectl create namespace argocd
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      ignore_errors: true

    # 1.23. Déployer Argo CD
    - name: Déployer Argo CD
      ansible.builtin.command: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.12.6/manifests/install.yaml
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config

    # 1.24. Attendre que les pods Argo CD soient prêts
    - name: Attendre que les pods Argo CD soient prêts
      ansible.builtin.command: kubectl wait --for=condition=Ready pods --all -n argocd --timeout=300s
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      retries: 3
      delay: 10

    # 1.25. Exposer Argo CD via LoadBalancer
    - name: Exposer Argo CD
      kubernetes.core.k8s:
        state: patched
        api_version: v1
        kind: Service
        namespace: argocd
        name: argocd-server
        definition:
          spec:
            type: LoadBalancer
            ports:
              - port: 443
                targetPort: 8080
                protocol: TCP
                name: https
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config

    # 1.26. Attendre que le LoadBalancer soit prêt
    - name: Attendre que le LoadBalancer soit prêt
      ansible.builtin.shell: |
        kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      register: lb_hostname
      retries: 10
      delay: 30

    # 1.27. Récupérer le mot de passe Argo CD
    - name: Récupérer le mot de passe Argo CD
      ansible.builtin.shell: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      register: argocd_password

    # 1.28. Stocker le mot de passe Argo CD
    - name: Stocker le mot de passe Argo CD
      ansible.builtin.copy:
        content: "{{ argocd_password.stdout }}"
        dest: /home/ubuntu/argocd-admin-password.txt
        mode: '0600'
        owner: ubuntu
        group: ubuntu

    # 1.29. Afficher l'URL d'accès à Argo CD
    - name: Afficher l'URL d'accès à Argo CD
      ansible.builtin.debug:
        msg: "Argo CD est accessible à https://{{ lb_hostname.stdout }} avec l'utilisateur 'admin' et le mot de passe dans /home/ubuntu/argocd-admin-password.txt"